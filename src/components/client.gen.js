// Code generated by oto; DO NOT EDIT.

'use strict';

 
export default class ConferenceService {
	
	async create(createConferenceRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		createConferenceRequest = createConferenceRequest || {}
		const response = await fetch('/oto/ConferenceService.Create', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(createConferenceRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async delete(deleteConferenceRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		deleteConferenceRequest = deleteConferenceRequest || {}
		const response = await fetch('/oto/ConferenceService.Delete', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(deleteConferenceRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async get(getConferenceRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		getConferenceRequest = getConferenceRequest || {}
		const response = await fetch('/oto/ConferenceService.Get', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(getConferenceRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async getBySlug(getConferenceBySlugRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		getConferenceBySlugRequest = getConferenceBySlugRequest || {}
		const response = await fetch('/oto/ConferenceService.GetBySlug', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(getConferenceBySlugRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	async list(listConferenceRequest) {
		const headers = {
			'Accept':		'application/json',
			'Accept-Encoding':	'gzip',
			'Content-Type':		'application/json',
		}
		listConferenceRequest = listConferenceRequest || {}
		const response = await fetch('/oto/ConferenceService.List', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(listConferenceRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}

